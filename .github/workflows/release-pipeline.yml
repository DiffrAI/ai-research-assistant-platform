name: Release Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-release-checks:
    name: Pre-Release Checks
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      release-type: ${{ steps.check.outputs.release-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if release is needed
        id: check
        run: |
          # Check if this is a manual release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "release-type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for conventional commits
          COMMITS=$(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD)
          
          if echo "$COMMITS" | grep -q "feat\|fix\|BREAKING CHANGE"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            
            if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
              echo "release-type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "feat"; then
              echo "release-type=minor" >> $GITHUB_OUTPUT
            else
              echo "release-type=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "release-type=none" >> $GITHUB_OUTPUT
          fi

  backend-checks:
    name: Backend Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest
      - name: Install dependencies
        run: uv sync --extra dev
      - name: Run linting
        run: uv run python -m ruff check . --output-format=github
      - name: Run type checking
        run: uv run mypy app/ --show-error-codes
      - name: Run security scan
        run: uv run bandit -r app/ -f json -o bandit-report.json || true
      - name: Run tests
        run: |
          cp docs/example.env .env
          echo "DATABASE_URL=sqlite+aiosqlite:///./test.db" >> .env
          echo "CACHE_BACKEND=local" >> .env
          echo "RATE_LIMIT_BACKEND=local" >> .env
          uv run pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      - name: Ensure coverage and bandit artifacts exist
        run: |
          [ -d htmlcov ] || mkdir htmlcov
          [ -f coverage.xml ] || touch coverage.xml
          [ -f bandit-report.json ] || echo '{}' > bandit-report.json
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: htmlcov/ coverage.xml bandit-report.json

  frontend-checks:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run linting
        working-directory: frontend
        run: npm run lint

      - name: Run tests
        working-directory: frontend
        run: npm test -- --coverage --watchAll=false

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  version:
    name: Version Management
    runs-on: ubuntu-latest
    needs: [pre-release-checks, backend-checks, frontend-checks]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      release-notes: ${{ steps.release-notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine new version
          RELEASE_TYPE="${{ needs.pre-release-checks.outputs.release-type }}"
          echo "Release type: $RELEASE_TYPE"
          
          # Bump version using semantic-release logic
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $RELEASE_TYPE in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in pyproject.toml
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          # Update version in frontend package.json
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" frontend/package.json

      - name: Generate release notes
        id: release-notes
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --reverse)
          else
            COMMITS=$(git log --oneline --reverse $LAST_TAG..HEAD)
          fi
          
          # Generate release notes
          NOTES="## What's Changed\n\n"
          NOTES+="### 🚀 Features\n"
          echo "$COMMITS" | grep "feat:" | sed 's/^/- /' | sed 's/feat: //' >> temp_features.txt || true
          if [ -s temp_features.txt ]; then
            NOTES+=$(cat temp_features.txt)
          else
            NOTES+="- No new features\n"
          fi
          
          NOTES+="\n### 🐛 Bug Fixes\n"
          echo "$COMMITS" | grep "fix:" | sed 's/^/- /' | sed 's/fix: //' >> temp_fixes.txt || true
          if [ -s temp_fixes.txt ]; then
            NOTES+=$(cat temp_fixes.txt)
          else
            NOTES+="- No bug fixes\n"
          fi
          
          NOTES+="\n### 📚 Documentation\n"
          echo "$COMMITS" | grep "docs:" | sed 's/^/- /' | sed 's/docs: //' >> temp_docs.txt || true
          if [ -s temp_docs.txt ]; then
            NOTES+=$(cat temp_docs.txt)
          else
            NOTES+="- No documentation changes\n"
          fi
          
          NOTES+="\n### 🧪 Testing\n"
          echo "$COMMITS" | grep "test:" | sed 's/^/- /' | sed 's/test: //' >> temp_tests.txt || true
          if [ -s temp_tests.txt ]; then
            NOTES+=$(cat temp_tests.txt)
          else
            NOTES+="- No test changes\n"
          fi
          
          NOTES+="\n### 🔧 Maintenance\n"
          echo "$COMMITS" | grep "chore:" | sed 's/^/- /' | sed 's/chore: //' >> temp_chores.txt || true
          if [ -s temp_chores.txt ]; then
            NOTES+=$(cat temp_chores.txt)
          else
            NOTES+="- No maintenance changes\n"
          fi
          
          # Clean up temp files
          rm -f temp_*.txt
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add pyproject.toml frontend/package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new-version }}"
          git push

  docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [version]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/celery
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Celery image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.celery
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [version, docker-images]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Create source distribution
        run: uv run python -m build --sdist

      - name: Create wheel distribution
        run: uv run python -m build --wheel

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Create release archive
        run: |
          mkdir -p release
          cp dist/* release/
          cp -r frontend/build release/frontend
          cp docs/example.env release/
          cp README.md release/
          cp docker-compose.yml release/
          cp docker-compose-langfuse.yaml release/
          
          # Create comprehensive documentation
          mkdir -p release/docs
          cp -r docs/* release/docs/
          
          # Create deployment scripts
          cat > release/deploy.sh << 'EOF'
          #!/bin/bash
          echo "Deploying AI Research Assistant Platform..."
          docker-compose up -d
          echo "Deployment complete!"
          EOF
          chmod +x release/deploy.sh
          
          # Create version info
          echo "Version: ${{ needs.version.outputs.new-version }}" > release/VERSION
          echo "Build Date: $(date)" >> release/VERSION
          echo "Commit: ${{ github.sha }}" >> release/VERSION
          
          # Create archive
          tar -czf ai-research-assistant-${{ needs.version.outputs.new-version }}.tar.gz release/

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ai-research-assistant-${{ needs.version.outputs.new-version }}.tar.gz
            dist/
            htmlcov/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version, release-artifacts]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.new-version }}
          release_name: Release v${{ needs.version.outputs.new-version }}
          body: |
            ${{ needs.version.outputs.release-notes }}
            
            ## 📦 Installation
            
            ### Docker (Recommended)
            ```bash
            # Download the release
            wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.version.outputs.new-version }}/ai-research-assistant-${{ needs.version.outputs.new-version }}.tar.gz
            tar -xzf ai-research-assistant-${{ needs.version.outputs.new-version }}.tar.gz
            cd release
            ./deploy.sh
            ```
            
            ### Manual Installation
            ```bash
            # Install Python dependencies
            uv sync --extra dev
            
            # Install frontend dependencies
            cd frontend && npm install
            ```
            
            ## 🔗 Links
            
            - **Documentation**: [docs/](docs/)
            - **API Reference**: http://localhost:8002/docs
            - **Frontend**: http://localhost:3000
            
            ## 🐳 Docker Images
            
            - Backend: `ghcr.io/${{ github.repository }}/backend:v${{ needs.version.outputs.new-version }}`
            - Frontend: `ghcr.io/${{ github.repository }}/frontend:v${{ needs.version.outputs.new-version }}`
            - Celery: `ghcr.io/${{ github.repository }}/celery:v${{ needs.version.outputs.new-version }}`
            
            ## 📊 Coverage Report
            
            Test coverage reports are included in the release artifacts.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ai-research-assistant-${{ needs.version.outputs.new-version }}.tar.gz
          asset_name: ai-research-assistant-${{ needs.version.outputs.new-version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Python Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: python-packages
          asset_content_type: application/octet-stream

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.pre-release-checks.outputs.should-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update release notes
        run: |
          echo "Release v${{ needs.version.outputs.new-version }} created successfully!"
          echo "Docker images pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Release artifacts uploaded to GitHub"

      - name: Notify success
        run: |
          echo "🎉 Release v${{ needs.version.outputs.new-version }} completed successfully!"
          echo "📦 Docker images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "📋 Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version.outputs.new-version }}" 