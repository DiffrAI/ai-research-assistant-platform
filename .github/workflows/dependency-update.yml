name: Dependency Update

on:
  schedule:
    # Run every Wednesday at 10 AM UTC
    - cron: '0 10 * * 3'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Check for Python dependency updates
        id: python-updates
        run: |
          echo "Checking for Python dependency updates..."
          
          # Check for outdated packages
          OUTDATED=$(uv run pip list --outdated --format=freeze | grep -v "WARNING" || true)
          
          if [ -n "$OUTDATED" ]; then
            echo "Found outdated Python packages:"
            echo "$OUTDATED"
            echo "has-updates=true" >> $GITHUB_OUTPUT
          else
            echo "No outdated Python packages found"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Check for Node.js dependency updates
        id: node-updates
        working-directory: frontend
        run: |
          echo "Checking for Node.js dependency updates..."
          
          # Check for outdated packages
          OUTDATED=$(npm outdated --json || echo "{}")
          
          if [ "$OUTDATED" != "{}" ]; then
            echo "Found outdated Node.js packages:"
            echo "$OUTDATED"
            echo "has-updates=true" >> $GITHUB_OUTPUT
          else
            echo "No outdated Node.js packages found"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Create update branch
        if: steps.python-updates.outputs.has-updates == 'true' || steps.node-updates.outputs.has-updates == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create branch name with timestamp
          BRANCH_NAME="deps/update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Update Python dependencies
        if: steps.python-updates.outputs.has-updates == 'true'
        run: |
          echo "Updating Python dependencies..."
          
          # Update dependencies using uv
          uv run pip install --upgrade $(uv run pip list --outdated --format=freeze | cut -d'=' -f1 | grep -v "WARNING" || true)
          
          # Update pyproject.toml if needed
          uv lock --upgrade
          
          # Commit changes
          git add pyproject.toml uv.lock
          git commit -m "chore: update Python dependencies" || echo "No Python dependency changes to commit"

      - name: Update Node.js dependencies
        if: steps.node-updates.outputs.has-updates == 'true'
        working-directory: frontend
        run: |
          echo "Updating Node.js dependencies..."
          
          # Update dependencies
          npm update
          
          # Commit changes
          git add package.json package-lock.json
          git commit -m "chore: update Node.js dependencies" || echo "No Node.js dependency changes to commit"

      - name: Push changes
        if: steps.python-updates.outputs.has-updates == 'true' || steps.node-updates.outputs.has-updates == 'true'
        run: |
          git push origin "${{ steps.create-update-branch.outputs.branch-name }}"

      - name: Create Pull Request
        if: steps.python-updates.outputs.has-updates == 'true' || steps.node-updates.outputs.has-updates == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create-update-branch.outputs.branch-name }}
          title: "chore: update dependencies"
          body: |
            ## ðŸ”„ Dependency Updates
            
            This PR updates outdated dependencies to their latest versions.
            
            ### Changes Made
            
            - **Python Dependencies**: Updated via `uv lock --upgrade`
            - **Node.js Dependencies**: Updated via `npm update`
            
            ### Testing
            
            - [ ] All tests pass
            - [ ] No breaking changes
            - [ ] Security vulnerabilities addressed
            
            ### Notes
            
            - This is an automated dependency update
            - Please review the changes before merging
            - Run the full test suite to ensure compatibility
            
            ---
            
            *This PR was created automatically by the dependency update workflow.*
          labels: |
            dependencies
            automated
            security
          assignees: ${{ github.repository_owner }}
          reviewers: ${{ github.repository_owner }}

  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Check for security vulnerabilities
        id: security-check
        run: |
          echo "Checking for security vulnerabilities..."
          
          # Run safety check
          SAFETY_RESULT=$(uv run safety check --json || echo "[]")
          
          if [ "$SAFETY_RESULT" != "[]" ]; then
            echo "Found security vulnerabilities:"
            echo "$SAFETY_RESULT"
            echo "has-vulnerabilities=true" >> $GITHUB_OUTPUT
          else
            echo "No security vulnerabilities found"
            echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Check for Node.js security vulnerabilities
        id: node-security-check
        working-directory: frontend
        run: |
          echo "Checking for Node.js security vulnerabilities..."
          
          # Run npm audit
          NPM_AUDIT_RESULT=$(npm audit --audit-level=moderate --json || echo "{}")
          
          if [ "$NPM_AUDIT_RESULT" != "{}" ]; then
            echo "Found Node.js security vulnerabilities:"
            echo "$NPM_AUDIT_RESULT"
            echo "has-vulnerabilities=true" >> $GITHUB_OUTPUT
          else
            echo "No Node.js security vulnerabilities found"
            echo "has-vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: Create security fix branch
        if: steps.security-check.outputs.has-vulnerabilities == 'true' || steps.node-security-check.outputs.has-vulnerabilities == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create branch name
          BRANCH_NAME="security/fix-vulnerabilities-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Fix Python security vulnerabilities
        if: steps.security-check.outputs.has-vulnerabilities == 'true'
        run: |
          echo "Fixing Python security vulnerabilities..."
          
          # Try to fix vulnerabilities
          uv run safety check --fix || echo "Could not auto-fix vulnerabilities"
          
          # Update dependencies
          uv lock --upgrade
          
          # Commit changes
          git add pyproject.toml uv.lock
          git commit -m "security: fix Python vulnerabilities" || echo "No security fixes to commit"

      - name: Fix Node.js security vulnerabilities
        if: steps.node-security-check.outputs.has-vulnerabilities == 'true'
        working-directory: frontend
        run: |
          echo "Fixing Node.js security vulnerabilities..."
          
          # Try to fix vulnerabilities
          npm audit fix || echo "Could not auto-fix vulnerabilities"
          
          # Commit changes
          git add package.json package-lock.json
          git commit -m "security: fix Node.js vulnerabilities" || echo "No security fixes to commit"

      - name: Push security fixes
        if: steps.security-check.outputs.has-vulnerabilities == 'true' || steps.node-security-check.outputs.has-vulnerabilities == 'true'
        run: |
          git push origin "${{ steps.create-security-fix-branch.outputs.branch-name }}"

      - name: Create Security PR
        if: steps.security-check.outputs.has-vulnerabilities == 'true' || steps.node-security-check.outputs.has-vulnerabilities == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create-security-fix-branch.outputs.branch-name }}
          title: "security: fix vulnerabilities"
          body: |
            ## ðŸ”’ Security Vulnerability Fixes
            
            This PR addresses security vulnerabilities found in dependencies.
            
            ### Security Issues Fixed
            
            - **Python Dependencies**: Fixed via `safety check --fix`
            - **Node.js Dependencies**: Fixed via `npm audit fix`
            
            ### Testing
            
            - [ ] All tests pass
            - [ ] Security scans pass
            - [ ] No breaking changes introduced
            
            ### Priority
            
            **HIGH** - Security vulnerabilities should be addressed immediately.
            
            ---
            
            *This PR was created automatically by the security update workflow.*
          labels: |
            security
            high-priority
            automated
          assignees: ${{ github.repository_owner }}
          reviewers: ${{ github.repository_owner }} 